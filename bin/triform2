#!/usr/bin/env python

import logging
import os
import argparse
from sys import argv, version_info

from triform.version import __version__

parser = argparse.ArgumentParser(
    description=
    """Triform2 ({}): Improved sensitivity, specificity and control of false discovery rates in ChIP-Seq peak finding.

(Visit github.com/endrebak/triform for examples and help.)

    """.format(__version__),
    prog=os.path.basename(__file__))

parser.add_argument('--version',
                    '-v',
                    action='version',
                    version='%(prog)s {}'.format(__version__))

parser.add_argument(
    '--treatment',
    '-t',
    required=True,
    type=str,
    nargs='+',
    help='''Treatment (pull-down) file(s) in bam/bed/bed.gz/bed.bz2 format.
                   ''')

parser.add_argument(
    '--control',
    '-c',
    required=False,
    type=str,
    nargs='+',
    help='''Control (input) file(s) in bam/bed/bed.gz/bed.bz2 format.''')

parser.add_argument(
    '--number-cores',
    '-cpu',
    required=False,
    default=1,
    type=int,
    help=
    '''Number of cpus to use. Can use at most one per chromosome. Default: 1.''')

parser.add_argument('--genome',
                    '-g',
                    required=False,
                    default="hg19",
                    type=str,
                    help='''Genome version to use.''')

parser.add_argument('--bedgraph',
                    '-b',
                    required=False,
                    default="",
                    type=str,
                    help='''Path to write bedgraph file to.''')

parser.add_argument(
    '--matrix',
    '-m',
    required=False,
    type=str,
    help=
    '''Write counts of midpoints of reads to binned (tiled) genome matrix.''')

parser.add_argument(
    '--matrix-bin-size',
    '-mbs',
    required=False,
    type=int,
    default=10,
    help=
    '''Size of genomic bins used when writing counts of midpoints of reads to binned genome matrix. Default: 10.
    (Has no influence on triform algorithm.)''')

parser.add_argument(
    '--max-p',
    '-mp',
    required=False,
    default=0.1,
    type=float,
    help=
    '''[Advanced] Used to calculate minimum upper-tail z-value (default corresponds to standard normal p = 0.1)''')

parser.add_argument(
    '--min-shift',
    '-ms',
    required=False,
    default=10,
    type=int,
    help=
    '''[Advanced] Minimum inter-strand shift (lag) between peak coverage distributions (default 10 bp).''')

parser.add_argument(
    '--min-width',
    '-mw',
    required=False,
    default=10,
    type=int,
    help=
    '''[Advanced] Minimum number of bp (peak width) in peak-like region (default 10 bp).''')

parser.add_argument(
    '--read-width',
    '-rw',
    required=False,
    default=100,
    type=int,
    help=
    '''[Advanced] Read width w, symmetrically extended to a fixed value. Must be larger than the flank size. Default: 100 bp.''')

parser.add_argument(
    '--flank-distance',
    '-fd',
    required=False,
    default=150,
    type=int,
    help=
    '''[Advanced] Fixed spacing between central and flanking locations (must be > w). Default: 150 bp.''')

parser.add_argument(
    '--min-enrichment',
    '-mr',
    required=False,
    default=0.375,
    type=float,
    help=
    '''[Advanced] Minimum local enrichment ratio (default 3/8 quantile of the enrichment ratio)''')

if __name__ == '__main__':

    from rpy2 import __version__ as rpy2v
    from pandas import __version__ as pdv
    import triform.config.logging_settings
    from triform.run_triform import (run_triform, run_triform_no_control)
    args = parser.parse_args()

    command = "# triform2 " + " ".join(argv[
        1:]) + " # triform2: {}, rpy2: {}, pandas: {}, python: {}".format(
            __version__, rpy2v, pdv, ".".join([str(i) for i in version_info]))
    print(command)
    logging.info(command)

    if args.control:
        run_triform(args)
    else:
        run_triform_no_control(args)
